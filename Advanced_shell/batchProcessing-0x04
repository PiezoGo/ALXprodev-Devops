#!/bin/bash

# List of Pokémon
pokemon_list=(bulbasaur ivysaur venusaur charmander charmeleon)

# Output directory
output_dir="pokemon_data"
mkdir -p "$output_dir"

# Clear previous errors
> errors.txt

# Track PIDs
declare -A pid_map

# Function to fetch one Pokémon
fetch_pokemon() {
    name="$1"
    max_retries=3
    attempt=1
    success=false

    while [ $attempt -le $max_retries ]; do
        response=$(curl -s -f "https://pokeapi.co/api/v2/pokemon/$name")
        if [ $? -eq 0 ]; then
            echo "$response" > "$output_dir/${name}.json"
            echo "Saved data to $output_dir/${name}.json ✅"
            success=true
            break
        else
            echo "Attempt $attempt failed for $name"
            sleep 1
            attempt=$((attempt + 1))
        fi
    done

    if [ "$success" = false ]; then
        echo "❌ Failed to fetch $name after $max_retries attempts" >> errors.txt
    fi
}

# Loop and spawn background jobs
for name in "${pokemon_list[@]}"; do
    fetch_pokemon "$name" &
    pid=$!
    pid_map["$pid"]="$name"
done

# Optionally: timeout limit (10 seconds)
sleep 10

# Kill any jobs still running
for pid in "${!pid_map[@]}"; do
    if kill -0 "$pid" 2>/dev/null; then
        echo "⏳ Process for ${pid_map[$pid]} still running. Killing it..."
        kill "$pid"
        echo "🔪 Killed process $pid for ${pid_map[$pid]}" >> errors.txt
    fi
done

# Wait for any that weren't killed
wait

echo "✅ All processes completed."
